name: CI

on:
  push:
    branches:
      - main
      - 'feature/**'
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'ai_docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'ai_docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run integration tests
        run: go test -v -tags=integration ./tests/...
        env:
          INTEGRATION_TEST: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
        continue-on-error: true

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Test Build ${{ matrix.os }}/${{ matrix.arch }}
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          CGO_ENABLED=0 go build -o /tmp/dddns-${{ matrix.os }}-${{ matrix.arch }} .
          echo "✓ Build successful for ${{ matrix.os }}/${{ matrix.arch }}"

  udm-test:
    name: UDM Platform Test
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build UDM Binary
        env:
          GOOS: linux
          GOARCH: arm64
        run: |
          CGO_ENABLED=0 go build -o dddns-udm .
          echo "✓ UDM binary built successfully"

      - name: Test UDM Profile Detection
        run: |
          # Create test file to simulate UDM environment
          sudo mkdir -p /proc/ubnthal
          echo "serialno=TEST123456" | sudo tee /proc/ubnthal/system.info

          # Run profile detection test
          go test -v -run TestProfileDetection ./internal/profile/...

      - name: Test UDM Crypto with Hardware ID
        run: |
          # Test that crypto works with UDM hardware ID
          go test -v -run TestGetDeviceKey ./internal/crypto/...

      - name: Test UDM Config Paths
        run: |
          # Create UDM-specific directories
          sudo mkdir -p /data/.dddns

          # Test config operations
          go test -v -run TestConfigPaths ./internal/config/...

      - name: Cleanup
        if: always()
        run: |
          sudo rm -rf /proc/ubnthal /data/.dddns